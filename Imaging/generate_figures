import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import networkx as nx
import scipy as sp
import scipy.spatial as sptl
from scipy.spatial import KDTree
from scipy.spatial import Voronoi
from scipy.spatial import ConvexHull
from scipy.spatial import distance

def Voronoi_3D2(G, angle):
  npoints = G.number_of_nodes()
  colors = nx.get_node_attributes(G, 'color')

  pos = nx.get_node_attributes(G, 'pos')

  points = np.zeros((npoints, 3))

  for ind in list(G.nodes):
    points[ind][0] = pos[ind][0]
    points[ind][1] = pos[ind][1]
    points[ind][2] = pos[ind][2]
  hull = ConvexHull(points)
  vor = Voronoi(points)
  nodes = vor.vertices
  center = points.mean(axis=0)
  vol = hull.volume
  dsph = (vol/4.18)**(1/3)
  tree = KDTree(hull.points)
  with plt.style.context(('ggplot')):

        fig = plt.figure(figsize=(18,15))
        ax = Axes3D(fig)
        ax.set_xlim3d(600, 1500)
        ax.set_ylim3d(400,1100)
        ax.set_zlim3d(0,700)

        # Loop on the pos dictionary to extract the x,y,z coordinates of each node
        for simplex in hull.simplices:
          x1 = np.array((points[simplex[0]][0], points[simplex[1]][0]))
          x2 = np.array((points[simplex[1]][0], points[simplex[2]][0]))
          x3 = np.array((points[simplex[2]][0], points[simplex[0]][0]))
          y1 = np.array((points[simplex[0]][1], points[simplex[1]][1]))
          y2 = np.array((points[simplex[1]][1], points[simplex[2]][1]))
          y3 = np.array((points[simplex[2]][1], points[simplex[0]][1]))
          z1 = np.array((points[simplex[0]][2], points[simplex[1]][2]))
          z2 = np.array((points[simplex[1]][2], points[simplex[2]][2]))
          z3 = np.array((points[simplex[2]][2], points[simplex[0]][2]))
          ax.plot(x1, y1, z1, c='blue', alpha=0.2)
          ax.plot(x2, y2, z2, c='blue', alpha=0.2)
          ax.plot(x3, y3, z3, c='blue', alpha=0.2)
          a = 0

        for facet in vor.ridge_vertices:
          a = a +1
          facet = np.asarray(facet)
          n = len(facet)
          for ind in range(0,n -1):
            dst1 = distance.euclidean(nodes[facet[ind]], center)
            dst2 = np.array(distance.euclidean(nodes[facet[ind+1]], center))

            if np.all(facet >= 0) and dst1<dsph and dst2<dsph:
              x = np.array((nodes[facet[ind]][0], nodes[facet[ind+1]][0]))
              y = np.array((nodes[facet[ind]][1], nodes[facet[ind+1]][1]))
              z = np.array((nodes[facet[ind]][2], nodes[facet[ind+1]][2]))
              ax.plot(x, y, z, c='gray', linewidth=2.0, alpha=0.4)


        x = []
        y = []
        z = []
        nodeColor = []
        s = []

        for key, value in pos.items():
            x.append(value[0])
            y.append(value[1])
            z.append(value[2])
            nodeColor.append(colors[key])
            s.append(20+20*G.degree(key))
         # Scatter plot
        sc = ax.scatter(x, y, z, c=nodeColor, s=s, edgecolors='k', alpha=0.7)

        # Loop on the list of edges to get the x,y,z, coordinates of the connected nodes
        # Those two points are the extrema of the line to be plotted


    # Set the initial view
  ax.view_init(30, angle)
  fig.patch.set_facecolor((1.0, 1, 1))
  ax.set_facecolor((1.0, 1, 1))
  ax.w_xaxis.set_pane_color((1.0, 1.0, 1.0, 1.0))
  ax.w_yaxis.set_pane_color((1.0, 1.0, 1.0, 1.0))
  ax.w_zaxis.set_pane_color((1.0, 1.0, 1.0, 1.0))
  plt.rc('grid', linestyle="-", color='black')
    #plt.axis('off')

    #ax.set_xlabel('X axis ($\mu m$)')
    #ax.set_ylabel('Y axis ($\mu m$)')
    #ax.set_zlabel('Z axis ($\mu m$)')
    #ax.set_xlim(100, 250)
    #ax.set_ylim(100, 250)
    #ax.set_zlim(50, 90)
  return
